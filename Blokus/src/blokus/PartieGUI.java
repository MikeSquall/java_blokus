/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package blokus;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextPane;
import javax.swing.border.Border;


/**
 *
 * @author Squall
 */
public class PartieGUI extends javax.swing.JFrame {
    
    int joueurActif;
    Piece selected;
    Piece pieceDrag;
    CollectionPieces collecPieces;
    int jBloked;
    int tour;
    int[][] plateau = new int[20][20];
    Joueur[] players = new Joueur[4];
    String msgErreur = "";
    DebugPlateau dp = new DebugPlateau(plateau);
    
    /**
     * Creates new form Partie
     */
    public PartieGUI(Joueur[] noms) {
        initComponents();
        this.setLocationRelativeTo(null);
        btnRotation.setIcon(new javax.swing.ImageIcon(getClass().getResource("/blokus/btnRotation.png")));
        btnSymetrie.setIcon(new javax.swing.ImageIcon(getClass().getResource("/blokus/btnSymetrie.png")));
        
        players[0] = noms[0];
        this.j1Name.setText(noms[0].getNom());
        players[1] = noms[1];
        this.j2Name.setText(noms[1].getNom());
        if(noms[2] == null && noms[3] == null){
            players[2] = noms[0];
            this.j3Name.setText(noms[0].getNom());
            players[3] = noms[1];
            this.j4Name.setText(noms[1].getNom());
        } else if(noms[2] != null && noms[3] == null){
            players[2] = noms[2];
            this.j3Name.setText(noms[2].getNom());
            players[3] = noms[0];
            this.j4Name.setText(noms[0].getNom());
        } else if(noms[2] != null && noms[3] != null){
            players[2] = noms[2];
            this.j3Name.setText(noms[2].getNom());
            players[3] = noms[3];
            this.j4Name.setText(noms[3].getNom());
        }
        int numCase = 0;
        for(int i = 0; i < 20; i++){
            for(int j = 0; j < 20; j++){
                Case c = new Case(numCase);
                c.setLocation(i*20, j*20);
                c.addMouseListener(new java.awt.event.MouseAdapter() {
                    public void mouseEntered(java.awt.event.MouseEvent e){
                        caseHoverIn(e);
                    }
                    public void mouseExited(java.awt.event.MouseEvent e){
                        caseHoverOut(e);
                    }
                    public void mouseClicked(java.awt.event.MouseEvent e){
                        drop(e);
                    }
                });
                board.add(c);
                numCase++;
                this.plateau[i][j] = -1;
            }
        }
        collecPieces = new CollectionPieces();
        this.creationPiecesPlateau(collecPieces);
        this.jBloked = 0;
        this.tour = 0;
        this.joueurActif = 0;
    }

    private PartieGUI() {
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        board = new javax.swing.JPanel();
        blueBox = new javax.swing.JPanel();
        greenBox = new javax.swing.JPanel();
        redBox = new javax.swing.JPanel();
        yellowBox = new javax.swing.JPanel();
        j1Name = new javax.swing.JLabel();
        j4Name = new javax.swing.JLabel();
        j2Name = new javax.swing.JLabel();
        j3Name = new javax.swing.JLabel();
        conteneurPieceJouee = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        btnSymetrie = new javax.swing.JLabel();
        btnRotation = new javax.swing.JLabel();
        selectedPiece = new javax.swing.JPanel();
        debugLabel = new javax.swing.JLabel();
        btnBloked = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Partie");
        setPreferredSize(new java.awt.Dimension(1024, 720));
        setResizable(false);

        board.setBackground(new java.awt.Color(255, 255, 255));
        board.setLocation(new java.awt.Point(312, 160));
        board.setMaximumSize(new java.awt.Dimension(400, 400));
        board.setPreferredSize(new java.awt.Dimension(400, 400));
        board.setSize(new java.awt.Dimension(400, 400));

        javax.swing.GroupLayout boardLayout = new javax.swing.GroupLayout(board);
        board.setLayout(boardLayout);
        boardLayout.setHorizontalGroup(
            boardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        boardLayout.setVerticalGroup(
            boardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );

        blueBox.setBackground(new java.awt.Color(220, 220, 245));

        javax.swing.GroupLayout blueBoxLayout = new javax.swing.GroupLayout(blueBox);
        blueBox.setLayout(blueBoxLayout);
        blueBoxLayout.setHorizontalGroup(
            blueBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 250, Short.MAX_VALUE)
        );
        blueBoxLayout.setVerticalGroup(
            blueBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 250, Short.MAX_VALUE)
        );

        greenBox.setBackground(new java.awt.Color(204, 255, 204));

        javax.swing.GroupLayout greenBoxLayout = new javax.swing.GroupLayout(greenBox);
        greenBox.setLayout(greenBoxLayout);
        greenBoxLayout.setHorizontalGroup(
            greenBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 250, Short.MAX_VALUE)
        );
        greenBoxLayout.setVerticalGroup(
            greenBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 250, Short.MAX_VALUE)
        );

        redBox.setBackground(new java.awt.Color(255, 204, 204));

        javax.swing.GroupLayout redBoxLayout = new javax.swing.GroupLayout(redBox);
        redBox.setLayout(redBoxLayout);
        redBoxLayout.setHorizontalGroup(
            redBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        redBoxLayout.setVerticalGroup(
            redBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 250, Short.MAX_VALUE)
        );

        yellowBox.setBackground(new java.awt.Color(255, 255, 204));

        javax.swing.GroupLayout yellowBoxLayout = new javax.swing.GroupLayout(yellowBox);
        yellowBox.setLayout(yellowBoxLayout);
        yellowBoxLayout.setHorizontalGroup(
            yellowBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        yellowBoxLayout.setVerticalGroup(
            yellowBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 250, Short.MAX_VALUE)
        );

        j1Name.setText("joueur1");

        j4Name.setText("joueur4");

        j2Name.setText("joueur2");

        j3Name.setText("joueur3");

        conteneurPieceJouee.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        jLabel1.setText("Pièce jouée");

        btnSymetrie.setText(" ");
        btnSymetrie.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnSymetrieMouseClicked(evt);
            }
        });

        btnRotation.setText(" ");
        btnRotation.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnRotationMouseClicked(evt);
            }
        });

        selectedPiece.setBorder(javax.swing.BorderFactory.createTitledBorder("Pièce sélectionnée"));
        selectedPiece.setPreferredSize(new java.awt.Dimension(140, 130));

        javax.swing.GroupLayout selectedPieceLayout = new javax.swing.GroupLayout(selectedPiece);
        selectedPiece.setLayout(selectedPieceLayout);
        selectedPieceLayout.setHorizontalGroup(
            selectedPieceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 128, Short.MAX_VALUE)
        );
        selectedPieceLayout.setVerticalGroup(
            selectedPieceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 106, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout conteneurPieceJoueeLayout = new javax.swing.GroupLayout(conteneurPieceJouee);
        conteneurPieceJouee.setLayout(conteneurPieceJoueeLayout);
        conteneurPieceJoueeLayout.setHorizontalGroup(
            conteneurPieceJoueeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(conteneurPieceJoueeLayout.createSequentialGroup()
                .addGap(130, 130, 130)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(conteneurPieceJoueeLayout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(btnSymetrie, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, Short.MAX_VALUE)
                .addComponent(selectedPiece, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnRotation, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34))
        );
        conteneurPieceJoueeLayout.setVerticalGroup(
            conteneurPieceJoueeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(conteneurPieceJoueeLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGroup(conteneurPieceJoueeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(conteneurPieceJoueeLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(conteneurPieceJoueeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnSymetrie, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnRotation, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, conteneurPieceJoueeLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                        .addComponent(selectedPiece, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(15, 15, 15))))
        );

        debugLabel.setText("jLabel2");

        btnBloked.setText("Je suis bloqué !");
        btnBloked.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBlokedActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(j1Name, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(blueBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(greenBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(j4Name, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(debugLabel)
                        .addGap(69, 69, 69)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(57, 57, 57)
                        .addComponent(conteneurPieceJouee, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(65, 65, 65))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(board, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(35, 35, 35)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(j2Name, javax.swing.GroupLayout.DEFAULT_SIZE, 252, Short.MAX_VALUE)
                    .addComponent(j3Name, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(redBox, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(yellowBox, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(btnBloked)
                .addGap(428, 428, 428))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(board, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(conteneurPieceJouee, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(blueBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(j1Name)
                        .addGap(24, 24, 24)
                        .addComponent(debugLabel)
                        .addGap(18, 18, 18)
                        .addComponent(j4Name)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(greenBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(yellowBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(j2Name)
                        .addGap(54, 54, 54)
                        .addComponent(j3Name)
                        .addGap(18, 18, 18)
                        .addComponent(redBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnBloked)
                .addContainerGap(28, Short.MAX_VALUE))
        );

        board.getAccessibleContext().setAccessibleName("");
        board.getAccessibleContext().setAccessibleDescription("");

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    // création de toutes les pièces pour chaque joueur
    private void creationPiecesPlateau(CollectionPieces board){
        int compteur = 0;
        // pièces bleues
        for(Piece p : board.piecesBleues){
            JPanel box = new JPanel();
            blueBox.add(box);
            box.setSize(50, 50);
            box.setBackground(this.blueBox.getBackground());
            //box.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
            box.setLocation((compteur/5)*50, (compteur%5)*50);
            box.setName(Integer.toString(compteur));
            box.addMouseListener(new java.awt.event.MouseAdapter() {
                @Override
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                    int num = Integer.parseInt(box.getName());
                    int color = 0;
                    if(joueurActif == color){
                        selected = new Piece(color, num+1);
                        affichePieceSelected(selected);
                    } else {
                        pasTonTour(0);
                    }
                }
            });
            box.setLayout(new GridBagLayout());
            GridBagConstraints gbc = new GridBagConstraints();
            for (int i = 0; i < p.getLargeur(); i++) {
                for (int j = 0; j < p.getHauteur(); j++) {
                    if(p.getForme(j,i) == 1){
                        JPanel partiePiece = new JPanel();
                        partiePiece.setPreferredSize(new Dimension (10, 10));
                        partiePiece.setBackground(Color.blue);
                        partiePiece.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
                        gbc.gridx = i;
                        gbc.gridy = j;
                        box.add(partiePiece, gbc);
                    } 
                }
            }
            compteur++;
        }
        compteur = 0;
        // pièces jaunes
        for(Piece p : board.piecesJaunes){
            JPanel box = new JPanel();
            yellowBox.add(box);
            box.setSize(50, 50);
            box.setBackground(this.yellowBox.getBackground());
            //box.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
            box.setLocation((compteur/5)*50, (compteur%5)*50);
            box.setName(Integer.toString(compteur));
            box.addMouseListener(new java.awt.event.MouseAdapter() {
                @Override
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                    int num = Integer.parseInt(box.getName());
                    int color = 1;
                    if(joueurActif == color){
                        selected = new Piece(color, num+1);
                        affichePieceSelected(selected);
                    } else {
                        pasTonTour(0);
                    }
                }
            });
            box.setLayout(new GridBagLayout());
            GridBagConstraints gbc = new GridBagConstraints();
            for (int i = 0; i < p.getLargeur(); i++) {
                for (int j = 0; j < p.getHauteur(); j++) {
                    if(p.getForme(j,i) == 1){
                        JPanel partiePiece = new JPanel();
                        partiePiece.setPreferredSize(new Dimension (10, 10));
                        partiePiece.setBackground(Color.yellow);
                        partiePiece.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
                        gbc.gridx = i;
                        gbc.gridy = j;
                        box.add(partiePiece, gbc);
                    } 
                }
            }
            compteur++;
        }
        compteur = 0;
        // pièces rouges
        for(Piece p : board.piecesRouges){
            JPanel box = new JPanel();
            redBox.add(box);
            box.setSize(50, 50);
            box.setBackground(this.redBox.getBackground());
            //box.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
            box.setLocation((compteur/5)*50, (compteur%5)*50);
            box.setName(Integer.toString(compteur));
            box.addMouseListener(new java.awt.event.MouseAdapter() {
                @Override
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                    int num = Integer.parseInt(box.getName());
                    int color = 2;
                    if(joueurActif == color){
                        selected = new Piece(color, num+1);
                        affichePieceSelected(selected);
                    } else {
                        pasTonTour(0);
                    }
                }
            });
            box.setLayout(new GridBagLayout());
            GridBagConstraints gbc = new GridBagConstraints();
            for (int i = 0; i < p.getLargeur(); i++) {
                for (int j = 0; j < p.getHauteur(); j++) {
                    if(p.getForme(j,i) == 1){
                        JPanel partiePiece = new JPanel();
                        partiePiece.setPreferredSize(new Dimension (10, 10));
                        partiePiece.setBackground(Color.red);
                        partiePiece.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
                        gbc.gridx = i;
                        gbc.gridy = j;
                        box.add(partiePiece, gbc);
                    } 
                }
            }
            compteur++;
        }
        compteur = 0;
        // pièces vertes
        for(Piece p : board.piecesVertes){
            JPanel box = new JPanel();
            greenBox.add(box);
            box.setSize(50, 50);
            box.setBackground(this.greenBox.getBackground());
            //box.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
            box.setLocation((compteur/5)*50, (compteur%5)*50);
            box.setName(Integer.toString(compteur));
            box.addMouseListener(new java.awt.event.MouseAdapter() {
                @Override
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                    int num = Integer.parseInt(box.getName());
                    int color = 3;
                    if(joueurActif == color){
                        selected = new Piece(color, num+1);
                        affichePieceSelected(selected);
                    } else {
                        pasTonTour(0);
                    }
                }
            });
            box.setLayout(new GridBagLayout());
            GridBagConstraints gbc = new GridBagConstraints();
            for (int i = 0; i < p.getLargeur(); i++) {
                for (int j = 0; j < p.getHauteur(); j++) {
                    if(p.getForme(j,i) == 1){
                        JPanel partiePiece = new JPanel();
                        partiePiece.setPreferredSize(new Dimension (10, 10));
                        partiePiece.setBackground(Color.green);
                        partiePiece.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
                        gbc.gridx = i;
                        gbc.gridy = j;
                        box.add(partiePiece, gbc);
                    } 
                }
            }
            compteur++;
        }
    }
    
    private void pasTonTour(int i){  
        String alert = "";
        if(i == 0){
            alert = "Attention ! ";
        }
        String nomJoueur = "" , couleur = "";
            switch(joueurActif){
                case 0:
                    nomJoueur = j1Name.getText();
                    couleur = "bleu";
                    break;
                case 1:
                    nomJoueur = j2Name.getText();
                    couleur = "jaune";
                    break;
                case 2:
                    nomJoueur = j3Name.getText();
                    couleur = "rouge";
                    break;
                case 3:
                    nomJoueur = j4Name.getText();
                    couleur = "vert";
                    break;
            }
            JOptionPane.showMessageDialog(this, alert + "C'est à "+ nomJoueur +" (joueur "+ couleur +") de jouer.");
    }
    
    private void affichePieceSelected(Piece p){
        if(p.getCouleurJoueur() != joueurActif){
            pasTonTour(0);
        } else {
            Color color = this.numToColor(p.getCouleurJoueur());
            Border border = javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0));
            JPanel box = new JPanel();
            selectedPiece.setLayout(new BorderLayout());
            selectedPiece.add(box, BorderLayout.CENTER);
            box.setPreferredSize(new Dimension(130, 120));
            box.setBorder(border);
            box.setLayout(new GridBagLayout());
            GridBagConstraints gbc = new GridBagConstraints();
            for (int i = 0; i < p.getLargeur(); i++) {
                for (int j = 0; j < p.getHauteur(); j++) {
                    if(p.getForme(j,i) == 1){
                        JTextPane partiePiece = new JTextPane();
                        partiePiece.setEditable(false);
                        partiePiece.setPreferredSize(new Dimension (19, 19));
                        partiePiece.setBackground(color);
                        partiePiece.setBorder(border);
                        gbc.gridx = i;
                        gbc.gridy = j;
                        box.add(partiePiece, gbc);
                        partiePiece.setVisible(true);
                    } 
                }
            }
        }
        // System.out.println(color.toString());
        // System.out.println("piece n°" + p.getNumeroPiece());
    }
    
    private void disposePieceSelected(){
        selectedPiece.getComponent(0).setVisible(false);
        selectedPiece.setBorder(javax.swing.BorderFactory.createTitledBorder("Pièce sélectionnée"));
        javax.swing.GroupLayout selectedPieceLayout = new javax.swing.GroupLayout(selectedPiece);
        selectedPiece.setLayout(selectedPieceLayout);
        selectedPieceLayout.setHorizontalGroup(
            selectedPieceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 124, Short.MAX_VALUE)
        );
        selectedPieceLayout.setVerticalGroup(
            selectedPieceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        selectedPiece.removeAll();
    }
    
    private Color numToColor(int i){
        Color c = Color.white;
            switch(i){
                case 0: 
                    c = Color.blue;
                    break;
                case 1:
                    c = Color.yellow;
                    break;
                case 2:
                    c = Color.red;
                    break;
                case 3:
                    c = Color.green;
                    break;
                default: 
                    c = Color.white;
                    break;
            }
        return c;
    }
    
    private void caseHoverIn(java.awt.event.MouseEvent e){
        if(selected != null){    
            Case c = (Case)e.getSource();
            int positionCase = c.getNumCase();
            //
            debugLabel.setText("");
            //
            int L = this.selected.getHauteur();
            int H = this.selected.getLargeur();
            for (int i = 0; i < H; i++) {
                for (int j = 0; j < L; j++) {
                    int finLigne = positionCase / 20;
                    if(c.getOccupee() != joueurActif && this.selected.getForme(j, i) == 1 && (positionCase + j < 400) && ((positionCase + j) < ((finLigne * 20) + 20))){
                        this.board.getComponent(positionCase+j).setBackground(this.numToColor(this.selected.getCouleurJoueur()));
                    }
                }
                if(positionCase + H < 400){
                    positionCase+=20;
                }
            }
        }
    }
    
    private void caseHoverOut(java.awt.event.MouseEvent e){
        for(int i = 0; i < 400; i++){
            Case c = (Case)(this.board.getComponent(i));
            c.setBackground(numToColor(c.getOccupee()));
        }
    }
    
    private Boolean dropTest(java.awt.event.MouseEvent e){
        Boolean flag = true; // indique si le mouvement est ok
        ArrayList<Integer> caseDroppable = new ArrayList<>(); // liste les cases où on peut lâcher une piece
        if(selected != null){    
            Case c = (Case)e.getSource();
            int numCaseCliquee = c.getNumCase();
            int H = this.selected.getHauteur();
            int L = this.selected.getLargeur();
            for (int i = 0; i < L; i++) { // double boucle qui vérifie que la forme rentre en entier
                for (int j = 0; j < H; j++) {
                    int finLigne = numCaseCliquee / 20;
                    try {
                        if(((Case)this.board.getComponent(numCaseCliquee+j)).getOccupee() == -1 && (numCaseCliquee + j < 400) && ((numCaseCliquee + j) < ((finLigne * 20) + 20))){
                            if (selected.getForme(j, i) == 1){
                                caseDroppable.add(numCaseCliquee+j);
                            }
                        } else {
                            if (selected.getForme(j, i) == 1){
                                msgErreur = "Vous ne pouvez pas chevaucher une autre pièce (1)";
                                flag = false;
                            }
                        }
                    } catch(java.lang.ArrayIndexOutOfBoundsException error){
                        msgErreur = "Vous ne pouvez pas poser une pièce en dehors du plateau";
                        flag = false;
                    }
                }
                if(numCaseCliquee + H < 400){
                    numCaseCliquee+=20;
                }
            }
            if(caseDroppable.size() < selected.getValeur()){
                msgErreur = "Vous ne pouvez pas chevaucher une autre pièce";
                flag = false;
            }
            //System.out.println(caseDroppable.toString());
            if(flag){
                if (tour < 4){ // test du 1er tour car caseDroppable est vide
                    flag = caseOk(c.getNumCase(), 0);
                } else { // on récupère les cases dont les coins sont de la couleur du joueur actif
                    ArrayList<Integer> possibilites = toucheCoin();
                    System.out.println("droppables : "+caseDroppable.toString());
                    System.out.println("coins      : "+possibilites.toString());
                    ArrayList<Integer> impossibles = casesInterdites();
                    System.out.println("interdites : "+impossibles.toString());
                    flag = false;
                    if(!checkInterdites(caseDroppable,impossibles)){
                        for(int i: caseDroppable){
                            if(caseOk(i,0)){
                                if (possibilites.contains(i)){
                                    flag = true;
                                    System.out.println(flag);
                                }
                            }
                            System.out.println(i);
                        }
                    }
                }
                if (flag == true){
                    for(int j: caseDroppable){
                        ((Case)this.board.getComponent(j)).setOccupee(joueurActif);
                        plateau[j%20][j/20] = joueurActif;
                    }
                } else {
                    msgErreur = "Vous ne pouvez pas poser votre pièce ici";
                }
            }
        }
        return flag;
    }
    
    private Boolean caseOk(int numCase, int codeAppel){ // codeAppel = 0 pour dropTest, = 1 pour toucheCoin
        Boolean flag = true;
        ArrayList<Integer> bordureNord  = new ArrayList<>();
        ArrayList<Integer> bordureSud   = new ArrayList<>();
        ArrayList<Integer> bordureEst   = new ArrayList<>();
        ArrayList<Integer> bordureOuest = new ArrayList<>();
        // on remplit les listes représentant les bordures du plateau
        for (int i = 0; i < 20; i++) {
            bordureNord.add(i*20);
            bordureSud.add((i*20)+19);
            bordureEst.add(380+i);
            bordureOuest.add(i);
        }
        // on enlève les 'coins' des bordures est et ouest pour éviter les doublons
        bordureEst.remove(0);
        bordureEst.remove(18);
        bordureOuest.remove(0);
        bordureOuest.remove(18);
        //
//        System.out.println(numCase);
//        System.out.println(bordureNord.contains(numCase));
//        System.out.println(bordureSud.contains(numCase));
//        System.out.println(bordureEst.contains(numCase));
//        System.out.println(bordureOuest.contains(numCase));
        
        if(tour < 4){
            if(joueurActif == 0 && (numCase != 0 || selected.getForme(0,0) == 0)){
                if(codeAppel == 0)
                    msgErreur = "La première pièce doit partir du coin supérieur gauche du plateau";
                flag = false;
            }
            else if(joueurActif == 1 && (numCase != (380-((selected.getLargeur()-1)*20)) || selected.getForme(0,selected.getLargeur()-1) == 0)){ 
                // comme la partie de la piece qui est placée est en haut à gauche, on compense le décalage
                if(codeAppel == 0)
                    msgErreur = "La première pièce doit partir du coin supérieur droit du plateau";
                flag = false;
            }
            else if(joueurActif == 2 && (numCase != (399-(((selected.getLargeur()-1)*20)+selected.getHauteur()-1)) || selected.getForme(selected.getHauteur()-1, selected.getLargeur()-1) == 0)){
                if(codeAppel == 0)
                    msgErreur = "La première pièce doit partir du coin inférieur droit du plateau";
                flag = false;
            }
            else if(joueurActif == 3 && (numCase != 19-(selected.getHauteur()-1) || selected.getForme(selected.getHauteur()-1,0) == 0)){
                if(codeAppel == 0)
                    msgErreur = "La première pièce doit partir du coin inférieur gauche du plateau";
                flag = false;
            }
        } else if(bordureNord.contains(numCase)){
            if (numCase == 0){
                if (((Case)this.board.getComponent(numCase + 1)).getOccupee() == joueurActif || ((Case)this.board.getComponent(numCase + 20)).getOccupee() == joueurActif ){
                    if(codeAppel == 0)
                        msgErreur = "La pièce jouée ne doit pas toucher une autre pièce de la même couleur (1)";
                    flag = false;
                }
            } else if (numCase == 380){
                if (((Case)this.board.getComponent(numCase + 1)).getOccupee() == joueurActif || ((Case)this.board.getComponent(numCase - 20)).getOccupee() == joueurActif ){
                    if(codeAppel == 0)
                        msgErreur = "La pièce jouée ne doit pas toucher une autre pièce de la même couleur (2)";
                    flag = false;
                }
            } else {
                if (((Case)this.board.getComponent(numCase -20)).getOccupee() == joueurActif || ((Case)this.board.getComponent(numCase + 1)).getOccupee() == joueurActif || ((Case)this.board.getComponent(numCase + 20)).getOccupee() == joueurActif ){
                    if(codeAppel == 0)
                        msgErreur = "La pièce jouée ne doit pas toucher une autre pièce de la même couleur (3)";
                    flag = false;
                }
            }
        } else if(bordureSud.contains(numCase)){
            if (numCase == 19){
                if (((Case)this.board.getComponent(numCase - 1)).getOccupee() == joueurActif || ((Case)this.board.getComponent(numCase + 20)).getOccupee() == joueurActif ){
                    if(codeAppel == 0)
                        msgErreur = "La pièce jouée ne doit pas toucher une autre pièce de la même couleur (4)";
                    flag = false;
                }
            } else if (numCase == 399){
                if (((Case)this.board.getComponent(numCase - 1)).getOccupee() == joueurActif || ((Case)this.board.getComponent(numCase - 20)).getOccupee() == joueurActif ){
                    if(codeAppel == 0)
                        msgErreur = "La pièce jouée ne doit pas toucher une autre pièce de la même couleur (5)";
                    flag = false;
                }
            } else {
                if (((Case)this.board.getComponent(numCase -20)).getOccupee() == joueurActif || ((Case)this.board.getComponent(numCase - 1)).getOccupee() == joueurActif || ((Case)this.board.getComponent(numCase + 20)).getOccupee() == joueurActif ){
                    if(codeAppel == 0)
                        msgErreur = "La pièce jouée ne doit pas toucher une autre pièce de la même couleur (6)";
                    flag = false;
                }
            }
        } else if(bordureEst.contains(numCase)){
            if (((Case)this.board.getComponent(numCase -20)).getOccupee() == joueurActif || ((Case)this.board.getComponent(numCase - 1)).getOccupee() == joueurActif || ((Case)this.board.getComponent(numCase + 1)).getOccupee() == joueurActif){
                if(codeAppel == 0)
                    msgErreur = "La pièce jouée ne doit pas toucher une autre pièce de la même couleur (7)";
                flag = false;
            }
        } else if(bordureOuest.contains(numCase)){
            if (((Case)this.board.getComponent(numCase - 1)).getOccupee() == joueurActif || ((Case)this.board.getComponent(numCase + 1)).getOccupee() == joueurActif || ((Case)this.board.getComponent(numCase + 20)).getOccupee() == joueurActif ){
                if(codeAppel == 0)
                    msgErreur = "La pièce jouée ne doit pas toucher une autre pièce de la même couleur (8)";
                flag = false;
            }
        } else {
            //System.out.println("cas général");
            if (((Case)this.board.getComponent(numCase -20)).getOccupee() == joueurActif || ((Case)this.board.getComponent(numCase - 1)).getOccupee() == joueurActif || ((Case)this.board.getComponent(numCase + 1)).getOccupee() == joueurActif || ((Case)this.board.getComponent(numCase + 20)).getOccupee() == joueurActif){
                if(codeAppel == 0)
                    msgErreur = "La pièce jouée ne doit pas toucher une autre pièce de la même couleur (9)";
                flag = false;
            }
        }
        return flag;
    }
    
    private ArrayList<Integer> toucheCoin(){
        ArrayList<Integer> bordureNord  = new ArrayList<>();
        ArrayList<Integer> bordureSud   = new ArrayList<>();
        ArrayList<Integer> bordureEst   = new ArrayList<>();
        ArrayList<Integer> bordureOuest = new ArrayList<>();
        ArrayList<Integer> casesJouables = new ArrayList<>();
        // on remplit les listes représentant les bordures du plateau
        for (int i = 0; i < 20; i++) {
            bordureNord.add(i*20);
            bordureSud.add((i*20)+19);
            bordureEst.add(380+i);
            bordureOuest.add(i);
        }
        // on enlève les 'coins' des bordures est et ouest pour éviter les doublons
        bordureEst.remove(0);
        bordureEst.remove(18);
        bordureOuest.remove(0);
        bordureOuest.remove(18);
        
        for (int i = 0; i < 400; i++) {
            Case caseTestee = ((Case)board.getComponent(i));
            if (caseTestee.getOccupee() == joueurActif){
                // si caseTestee est dans la bordure Nord
                if(bordureNord.contains(caseTestee.getNumCase())){
                    if(caseTestee.getNumCase() == 0){
                        if(((Case)board.getComponent(21)).getOccupee() == -1){
                            casesJouables.add(21);
                        }
                    } else if (caseTestee.getNumCase() == 380){
                        if(((Case)board.getComponent(361)).getOccupee() == -1){
                            casesJouables.add(361);
                        }
                    } else {
                        if(((Case)board.getComponent(i-19)).getOccupee() == -1){
                            if(caseOk(((Case)board.getComponent(i-19)).getNumCase(), 1))
                                casesJouables.add(i-19);
                        }
                        if(((Case)board.getComponent(i+21)).getOccupee() == -1){
                            if(caseOk(((Case)board.getComponent(i+21)).getNumCase(), 1))
                                casesJouables.add(i+21);
                        }
                    }
                } // si caseTestee est dans la bordure Sud
                else if(bordureSud.contains(caseTestee.getNumCase())){
                    if(caseTestee.getNumCase() == 19){
                        if(((Case)board.getComponent(38)).getOccupee() == -1){
                            casesJouables.add(38);
                        }
                    } else if (caseTestee.getNumCase() == 399){
                        if(((Case)board.getComponent(378)).getOccupee() == -1){
                            casesJouables.add(378);
                        }
                    } else {
                        if(((Case)board.getComponent(i+19)).getOccupee() == -1){
                            if(caseOk(((Case)board.getComponent(i+19)).getNumCase(), 1))
                                casesJouables.add(i+19);
                        }
                        if(((Case)board.getComponent(i-21)).getOccupee() == -1){
                            if(caseOk(((Case)board.getComponent(i-21)).getNumCase(), 1))
                                casesJouables.add(i-21);
                        }
                    }
                } // si caseTestee est dans la bordure Est
                else if(bordureEst.contains(caseTestee.getNumCase())){
                    if(((Case)board.getComponent(i-19)).getOccupee() == -1){
                        if(caseOk(((Case)board.getComponent(i-19)).getNumCase(), 1))
                            casesJouables.add(i-19);
                    }
                    if(((Case)board.getComponent(i-21)).getOccupee() == -1){
                        if(caseOk(((Case)board.getComponent(i-21)).getNumCase(), 1))
                            casesJouables.add(i-21);
                    }
                } // si caseTestee est dans la bordure Ouest
                else if(bordureOuest.contains(caseTestee.getNumCase())){
                    if(((Case)board.getComponent(i+19)).getOccupee() == -1){
                        if(caseOk(((Case)board.getComponent(i+19)).getNumCase(), 1))
                            casesJouables.add(i+19);
                    }
                    if(((Case)board.getComponent(i+21)).getOccupee() == -1){
                        if(caseOk(((Case)board.getComponent(i+21)).getNumCase(), 1))
                            casesJouables.add(i+21);
                    }
                } // si caseTestee est ailleurs dans le plateau (cas général)
                else { 
                    if(((Case)board.getComponent(i-19)).getOccupee() == -1){
                        if(caseOk(((Case)board.getComponent(i-19)).getNumCase(), 1))
                            casesJouables.add(i-19);
                    }
                    if(((Case)board.getComponent(i-21)).getOccupee() == -1){
                        if(caseOk(((Case)board.getComponent(i-21)).getNumCase(), 1))
                            casesJouables.add(i-21);
                    }
                    if(((Case)board.getComponent(i+19)).getOccupee() == -1){
                        if(caseOk(((Case)board.getComponent(i+19)).getNumCase(), 1))
                            casesJouables.add(i+19);
                    }
                    if(((Case)board.getComponent(i+21)).getOccupee() == -1){
                        if(caseOk(((Case)board.getComponent(i+21)).getNumCase(), 1))
                            casesJouables.add(i+21);
                    }
                }
            }
        }
        
        return casesJouables;
    }
    
    private ArrayList<Integer> casesInterdites(){
        ArrayList<Integer> bordureNord  = new ArrayList<>();
        ArrayList<Integer> bordureSud   = new ArrayList<>();
        ArrayList<Integer> bordureEst   = new ArrayList<>();
        ArrayList<Integer> bordureOuest = new ArrayList<>();
        ArrayList<Integer> casesKO = new ArrayList<>();
        
        for (int i = 0; i < 20; i++) {
            bordureNord.add(i*20);
            bordureSud.add((i*20)+19);
            bordureEst.add(380+i);
            bordureOuest.add(i);
        }
        
        for (int i = 0; i < 400; i++) {
            Case caseTestee = ((Case)board.getComponent(i));
            if (caseTestee.getOccupee() == joueurActif){
                // si caseTestee est dans la bordure Nord
                if(bordureNord.contains(caseTestee.getNumCase())){
                    if(caseTestee.getNumCase() == 0){
                        if(((Case)board.getComponent(21)).getOccupee() == -1){
                            casesKO.add(21);
                        }
                    } else if (caseTestee.getNumCase() == 380){
                        if(((Case)board.getComponent(361)).getOccupee() == -1){
                            casesKO.add(361);
                        }
                    } else {
                        if(((Case)board.getComponent(i-19)).getOccupee() == -1){
                            if(!caseOk(((Case)board.getComponent(i-19)).getNumCase(), 1))
                                casesKO.add(i-19);
                        }
                        if(((Case)board.getComponent(i+21)).getOccupee() == -1){
                            if(!caseOk(((Case)board.getComponent(i+21)).getNumCase(), 1))
                                casesKO.add(i+21);
                        }
                    }
                } // si caseTestee est dans la bordure Sud
                else if(bordureSud.contains(caseTestee.getNumCase())){
                    if(caseTestee.getNumCase() == 19){
                        if(((Case)board.getComponent(38)).getOccupee() == -1){
                            casesKO.add(38);
                        }
                    } else if (caseTestee.getNumCase() == 399){
                        if(((Case)board.getComponent(378)).getOccupee() == -1){
                            casesKO.add(378);
                        }
                    } else {
                        if(((Case)board.getComponent(i+19)).getOccupee() == -1){
                            if(!caseOk(((Case)board.getComponent(i+19)).getNumCase(), 1))
                                casesKO.add(i+19);
                        }
                        if(((Case)board.getComponent(i-21)).getOccupee() == -1){
                            if(!caseOk(((Case)board.getComponent(i-21)).getNumCase(), 1))
                                casesKO.add(i-21);
                        }
                    }
                } // si caseTestee est dans la bordure Est
                else if(bordureEst.contains(caseTestee.getNumCase())){
                    if(((Case)board.getComponent(i-19)).getOccupee() == -1){
                        if(!caseOk(((Case)board.getComponent(i-19)).getNumCase(), 1))
                            casesKO.add(i-19);
                    }
                    if(((Case)board.getComponent(i-21)).getOccupee() == -1){
                        if(!caseOk(((Case)board.getComponent(i-21)).getNumCase(), 1))
                            casesKO.add(i-21);
                    }
                } // si caseTestee est dans la bordure Ouest
                else if(bordureOuest.contains(caseTestee.getNumCase())){
                    if(((Case)board.getComponent(i+19)).getOccupee() == -1){
                        if(!caseOk(((Case)board.getComponent(i+19)).getNumCase(), 1))
                            casesKO.add(i+19);
                    }
                    if(((Case)board.getComponent(i+21)).getOccupee() == -1){
                        if(!caseOk(((Case)board.getComponent(i+21)).getNumCase(), 1))
                            casesKO.add(i+21);
                    }
                } // si caseTestee est ailleurs dans le plateau (cas général)
                else {
                    if(((Case)board.getComponent(i-19)).getOccupee() == -1){
                        if(!caseOk(((Case)board.getComponent(i-19)).getNumCase(), 1))
                            casesKO.add(i-19);
                    }
                    if(((Case)board.getComponent(i-21)).getOccupee() == -1){
                        if(!caseOk(((Case)board.getComponent(i-21)).getNumCase(), 1))
                            casesKO.add(i-21);
                    }
                    if(((Case)board.getComponent(i+19)).getOccupee() == -1){
                        if(!caseOk(((Case)board.getComponent(i+19)).getNumCase(), 1))
                            casesKO.add(i+19);
                    }
                    if(((Case)board.getComponent(i+21)).getOccupee() == -1){
                        if(!caseOk(((Case)board.getComponent(i+21)).getNumCase(), 1))
                            casesKO.add(i+21);
                    }
                }
            }    
        }
        return casesKO;
    }
    
    private Boolean checkInterdites(ArrayList<Integer> source, ArrayList<Integer> cible){
        boolean flag = false;
        
        for(int i: source){
            if(cible.contains(i)){
                flag = true;
            }
        }
        return flag;
    }
    
    private void drop(java.awt.event.MouseEvent e){
        if(selected != null){
            // on vérifie si le mouvement est autorisé
            if(dropTest(e)){ 
                // on enlève la pièce jouée de la collection du joueur
                switch(joueurActif){
                    case 0:
                        blueBox.getComponent(selected.getNumeroPiece()-1).setVisible(false);
                        break;
                    case 1 :
                        yellowBox.getComponent(selected.getNumeroPiece()-1).setVisible(false);
                        break;
                    case 2:
                        redBox.getComponent(selected.getNumeroPiece()-1).setVisible(false);
                        break;
                    case 3:
                        greenBox.getComponent(selected.getNumeroPiece()-1).setVisible(false);
                        break;
                }
                // on met à jour ses points
                players[joueurActif].setPoints(selected.getValeur());
                // on réinitialise le bloc 'pièce sélectionnée'
                selected = null;
                disposePieceSelected();
                // on passe le tour au joueur suivant
                tourSuivant();
            } else {
                JOptionPane.showMessageDialog(this, "Attention ! " + msgErreur);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Attention ! Vous n'avez pas sélectionné de pièce");
        }
        
    }
    
    private void tourSuivant(){
        switch(this.joueurActif){
            case 0: case 1: case 2:
                this.joueurActif++;
                break;
            case 3:
                this.joueurActif = 0;
                break;
        }
        if(players[joueurActif].getBlok()){
           tourSuivant(); 
        } else {
            pasTonTour(1);
        }
        //dp = new DebugPlateau(plateau);
        //dp.setVisible(true);
        tour++;
    }
    
    private void btnRotationMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnRotationMouseClicked
        Piece p = Piece.rotationPiece(selected);
        this.affichePieceSelected(p);
        selected = p;
    }//GEN-LAST:event_btnRotationMouseClicked

    private void btnSymetrieMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSymetrieMouseClicked
        Piece p = Piece.symetriePiece(selected);
        this.affichePieceSelected(p);
        selected = p;
    }//GEN-LAST:event_btnSymetrieMouseClicked

    private void btnBlokedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBlokedActionPerformed
        players[joueurActif].setBlok();
        String couleur = "";
        switch(joueurActif){
                case 0:
                    couleur = "bleu";
                    break;
                case 1:
                    couleur = "jaune";
                    break;
                case 2:
                    couleur = "rouge";
                    break;
                case 3:
                    couleur = "vert";
                    break;
            }
        JOptionPane.showMessageDialog(this, players[joueurActif].getNom() + " (" + couleur + ") est bloqué !\nIl ne pourra plus jouer durant cette partie.");
        tourSuivant();
    }//GEN-LAST:event_btnBlokedActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PartieGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PartieGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PartieGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PartieGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PartieGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel blueBox;
    private javax.swing.JPanel board;
    private javax.swing.JButton btnBloked;
    private javax.swing.JLabel btnRotation;
    private javax.swing.JLabel btnSymetrie;
    private javax.swing.JPanel conteneurPieceJouee;
    private javax.swing.JLabel debugLabel;
    private javax.swing.JPanel greenBox;
    private javax.swing.JLabel j1Name;
    private javax.swing.JLabel j2Name;
    private javax.swing.JLabel j3Name;
    private javax.swing.JLabel j4Name;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel redBox;
    private javax.swing.JPanel selectedPiece;
    private javax.swing.JPanel yellowBox;
    // End of variables declaration//GEN-END:variables
}
